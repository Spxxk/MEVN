{"ast":null,"code":"import axios from 'axios';\n// import nodemailer from 'nodemailer';\nconst API_URL = 'http://localhost:3000';\nexport default {\n  name: 'NotificationView',\n  data() {\n    return {\n      eventData: {\n        email: '',\n        date: ''\n      },\n      res: ''\n    };\n  },\n  async mounted() {\n    try {\n      const response = await axios.get(`${API_URL}/event/${this.$route.params.game}/`, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      console.log(\"response:\", response);\n      this.res = response.data[0];\n    } catch (error) {\n      console.error('Error fetching games:', error);\n    }\n  },\n  methods: {\n    async submitForm() {\n      try {\n        // create email\n        console.log(this.eventData.email);\n        console.log(this.eventData.date);\n        const data = JSON.stringify({\n          \"Messages\": [{\n            \"From\": {\n              \"Email\": \"<YOUR EMAIL>\",\n              \"Name\": \"<YOUR NAME>\"\n            },\n            \"To\": [{\n              \"Email\": \"owenchen@gmail.com\",\n              \"Name\": \"aaa\"\n            }],\n            \"Subject\": \"test subject\",\n            \"TextPart\": \"test message\"\n          }]\n        });\n        const config = {\n          method: 'post',\n          url: 'https://api.mailjet.com/v3.1/send',\n          data: data,\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          auth: {\n            username: '<API Key>',\n            password: '<Secret Key>'\n          }\n        };\n        return axios(config).then(function (response) {\n          console.log(JSON.stringify(response.data));\n        }).catch(function (error) {\n          console.log(error);\n        });\n\n        // var transporter = nodemailer.createTransport({\n        //     service: 'gmail',\n        //     auth: {\n        //         user: 'youremail@gmail.com',\n        //         pass: 'yourpassword'\n        //     }\n        // });\n        // console.log(transporter)\n\n        // var mailOptions = {\n        //     from: 'youremail@gmail.com',\n        //     to: 'myfriend@yahoo.com',\n        //     subject: 'Sending Email using Node.js',\n        //     text: 'That was easy!'\n        // };\n\n        // transporter.sendMail(mailOptions, function (error, info) {\n        //     if (error) {\n        //         console.log(error);\n        //     } else {\n        //         console.log('Email sent: ' + info.response);\n        //     }\n        // });\n      } catch (error) {\n        // error\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","name","data","eventData","email","date","res","mounted","response","get","$route","params","game","headers","console","log","error","methods","submitForm","JSON","stringify","config","method","url","auth","username","password","then","catch"],"sources":["C:\\Users\\jason\\Desktop\\owen\\frontend\\src\\views\\NotificationView.vue"],"sourcesContent":["<template>\r\n    <div class=\"section is-flex is-justify-content-center\">\r\n        <h1 class=\"title\">Notification</h1>\r\n    </div>\r\n    <div class=\"create-event card\" style=\"margin-bottom: 40px\">\r\n        <header class=\"card-header has-background-danger\">\r\n            <strong style=\"padding: 10px; color: black\">Notification</strong>\r\n        </header>\r\n        <h1> details </h1>\r\n        <h2> game: {{ res['game'] }}</h2>\r\n        <h2> league: {{ res['league'] }}</h2>\r\n        <h2> team1: {{ res['team1'] }}</h2>\r\n        <h2> team2: {{ res['team2'] }}</h2>\r\n        <form @submit.prevent=\"submitForm\">\r\n            <div style=\"padding-top: 10px\">\r\n                <label for=\"email\">Email</label>\r\n                <input type=\"text\" id=\"email\" v-model=\"eventData.email\" required>\r\n            </div>\r\n            <div>\r\n                <label for=\"date\">Date</label>\r\n                <input type=\"datetime-local\" id=\"date\" v-model=\"eventData.date\" required>\r\n            </div>\r\n            <button type=\"submit\" class=\"button is-primary\">Notify Me!</button>\r\n        </form>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\n// import nodemailer from 'nodemailer';\r\nconst API_URL = 'http://localhost:3000';\r\n\r\nexport default {\r\n    name: 'NotificationView',\r\n    data() {\r\n        return {\r\n            eventData: {\r\n                email: '',\r\n                date: '',\r\n            },\r\n            res: ''\r\n        };\r\n    },\r\n    async mounted() {\r\n        try {\r\n            const response = await axios.get(`${API_URL}/event/${this.$route.params.game}/`, {\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                }\r\n            });\r\n            console.log(\"response:\", response);\r\n            this.res = response.data[0];\r\n        } catch (error) {\r\n            console.error('Error fetching games:', error);\r\n        }\r\n    },\r\n    methods: {\r\n        async submitForm() {\r\n            try {\r\n                // create email\r\n                console.log(this.eventData.email);\r\n                console.log(this.eventData.date);\r\n                const data = JSON.stringify({\r\n                    \"Messages\": [{\r\n                        \"From\": { \"Email\": \"<YOUR EMAIL>\", \"Name\": \"<YOUR NAME>\" },\r\n                        \"To\": [{ \"Email\": \"owenchen@gmail.com\", \"Name\": \"aaa\" }],\r\n                        \"Subject\": \"test subject\",\r\n                        \"TextPart\": \"test message\"\r\n                    }]\r\n                });\r\n\r\n                const config = {\r\n                    method: 'post',\r\n                    url: 'https://api.mailjet.com/v3.1/send',\r\n                    data: data,\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    auth: { username: '<API Key>', password: '<Secret Key>' },\r\n                };\r\n\r\n                return axios(config)\r\n                    .then(function (response) {\r\n                        console.log(JSON.stringify(response.data));\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(error);\r\n                    });\r\n\r\n                // var transporter = nodemailer.createTransport({\r\n                //     service: 'gmail',\r\n                //     auth: {\r\n                //         user: 'youremail@gmail.com',\r\n                //         pass: 'yourpassword'\r\n                //     }\r\n                // });\r\n                // console.log(transporter)\r\n\r\n                // var mailOptions = {\r\n                //     from: 'youremail@gmail.com',\r\n                //     to: 'myfriend@yahoo.com',\r\n                //     subject: 'Sending Email using Node.js',\r\n                //     text: 'That was easy!'\r\n                // };\r\n\r\n                // transporter.sendMail(mailOptions, function (error, info) {\r\n                //     if (error) {\r\n                //         console.log(error);\r\n                //     } else {\r\n                //         console.log('Email sent: ' + info.response);\r\n                //     }\r\n                // });\r\n\r\n\r\n\r\n            } catch (error) {\r\n                // error\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.create-event {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.create-event h2 {\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n}\r\n\r\nform {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\nform>div {\r\n    margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n    font-weight: bold;\r\n    margin-bottom: 5px;\r\n    display: block;\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"number\"],\r\ninput[type=\"date\"],\r\ntextarea {\r\n    width: 100%;\r\n    padding: 8px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n    height: 100px;\r\n}\r\n</style>"],"mappings":"AA2BA,OAAOA,KAAI,MAAO,OAAO;AACzB;AACA,MAAMC,OAAM,GAAI,uBAAuB;AAEvC,eAAe;EACXC,IAAI,EAAE,kBAAkB;EACxBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE;MACV,CAAC;MACDC,GAAG,EAAE;IACT,CAAC;EACL,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACZ,IAAI;MACA,MAAMC,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAE,GAAET,OAAQ,UAAS,IAAI,CAACU,MAAM,CAACC,MAAM,CAACC,IAAK,GAAE,EAAE;QAC7EC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEP,QAAQ,CAAC;MAClC,IAAI,CAACF,GAAE,GAAIE,QAAQ,CAACN,IAAI,CAAC,CAAC,CAAC;IAC/B,EAAE,OAAOc,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,UAAUA,CAAA,EAAG;MACf,IAAI;QACA;QACAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS,CAACC,KAAK,CAAC;QACjCU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,SAAS,CAACE,IAAI,CAAC;QAChC,MAAMH,IAAG,GAAIiB,IAAI,CAACC,SAAS,CAAC;UACxB,UAAU,EAAE,CAAC;YACT,MAAM,EAAE;cAAE,OAAO,EAAE,cAAc;cAAE,MAAM,EAAE;YAAc,CAAC;YAC1D,IAAI,EAAE,CAAC;cAAE,OAAO,EAAE,oBAAoB;cAAE,MAAM,EAAE;YAAM,CAAC,CAAC;YACxD,SAAS,EAAE,cAAc;YACzB,UAAU,EAAE;UAChB,CAAC;QACL,CAAC,CAAC;QAEF,MAAMC,MAAK,GAAI;UACXC,MAAM,EAAE,MAAM;UACdC,GAAG,EAAE,mCAAmC;UACxCrB,IAAI,EAAEA,IAAI;UACVW,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CW,IAAI,EAAE;YAAEC,QAAQ,EAAE,WAAW;YAAEC,QAAQ,EAAE;UAAe;QAC5D,CAAC;QAED,OAAO3B,KAAK,CAACsB,MAAM,EACdM,IAAI,CAAC,UAAUnB,QAAQ,EAAE;UACtBM,OAAO,CAACC,GAAG,CAACI,IAAI,CAACC,SAAS,CAACZ,QAAQ,CAACN,IAAI,CAAC,CAAC;QAC9C,CAAC,EACA0B,KAAK,CAAC,UAAUZ,KAAK,EAAE;UACpBF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;QACtB,CAAC,CAAC;;QAEN;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;MAIJ,EAAE,OAAOA,KAAK,EAAE;QACZ;MAAA;IAER;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}