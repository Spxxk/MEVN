{"ast":null,"code":"// store/user.js\nimport AuthService from '@/services/AuthService'; // Assuming AuthService is imported and available\n\nexport default {\n  state: {\n    user: null,\n    // Initial user state\n    isLoggedIn: false // Tracks the login status\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n      state.isLoggedIn = !!user;\n    },\n    clearUser(state) {\n      state.user = null;\n      state.isLoggedIn = false;\n    }\n  },\n  actions: {\n    async loginUser({\n      commit\n    }, credentials) {\n      try {\n        // Call AuthService to authenticate the user\n        const resp = await AuthService.login(credentials);\n        const token = resp.token;\n        // Decode the token to extract user information\n        const user = AuthService.decodeToken(token);\n\n        // Upon successful authentication, commit the setUser mutation\n        commit('setUser', user);\n\n        // Optionally, store the token in local storage or a cookie for persistent login\n        localStorage.setItem('token', token);\n        console.log('User logged in:', user.email);\n      } catch (error) {\n        // Handle authentication errors\n        console.error('Failed to log in:', error);\n        throw error;\n      }\n    },\n    logoutUser({\n      commit\n    }) {\n      // Remove the token from local storage\n      localStorage.removeItem('token');\n\n      // Commit the clearUser mutation to reset the user state\n      commit('clearUser');\n    },\n    rehydrateAuthenticationState({\n      commit\n    }) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Decode the token to get the user info\n        const user = AuthService.decodeToken(token);\n        // Update the Vuex state with the decoded user info\n        commit('setUser', user);\n      } else {\n        // If no token is found, clear the user state\n        commit('clearUser');\n      }\n    }\n  },\n  getters: {\n    isLoggedIn: state => state.isLoggedIn,\n    currentUser: state => state.user\n  }\n};","map":{"version":3,"names":["AuthService","state","user","isLoggedIn","mutations","setUser","clearUser","actions","loginUser","commit","credentials","resp","login","token","decodeToken","localStorage","setItem","console","log","email","error","logoutUser","removeItem","rehydrateAuthenticationState","getItem","getters","currentUser"],"sources":["C:/Users/jason/Desktop/owen/frontend/src/store/user.js"],"sourcesContent":["// store/user.js\nimport AuthService from '@/services/AuthService'; // Assuming AuthService is imported and available\n\nexport default {\n    state: {\n        user: null, // Initial user state\n        isLoggedIn: false, // Tracks the login status\n    },\n    mutations: {\n        setUser(state, user) {\n            state.user = user;\n            state.isLoggedIn = !!user;\n        },\n        clearUser(state) {\n            state.user = null;\n            state.isLoggedIn = false;\n        }\n    },\n    actions: {\n        async loginUser({ commit }, credentials) {\n            try {\n                // Call AuthService to authenticate the user\n                const resp = await AuthService.login(credentials);\n                const token = resp.token;\n                // Decode the token to extract user information\n                const user = AuthService.decodeToken(token);\n\n                // Upon successful authentication, commit the setUser mutation\n                commit('setUser', user);\n\n                // Optionally, store the token in local storage or a cookie for persistent login\n                localStorage.setItem('token', token);\n\n                console.log('User logged in:', user.email);\n            } catch (error) {\n                // Handle authentication errors\n                console.error('Failed to log in:', error);\n                throw error;\n            }\n        },\n        logoutUser({ commit }) {\n            // Remove the token from local storage\n            localStorage.removeItem('token');\n            \n            // Commit the clearUser mutation to reset the user state\n            commit('clearUser');\n        },\n        rehydrateAuthenticationState({ commit }) {\n            const token = localStorage.getItem('token');\n            if (token) {\n                // Decode the token to get the user info\n                const user = AuthService.decodeToken(token);\n                // Update the Vuex state with the decoded user info\n                commit('setUser', user);\n            } else {\n                // If no token is found, clear the user state\n                commit('clearUser');\n            }\n        }\n    },\n    getters: {\n        isLoggedIn: (state) => state.isLoggedIn,\n        currentUser: (state) => state.user,\n    }\n};\n"],"mappings":"AAAA;AACA,OAAOA,WAAW,MAAM,wBAAwB,CAAC,CAAC;;AAElD,eAAe;EACXC,KAAK,EAAE;IACHC,IAAI,EAAE,IAAI;IAAE;IACZC,UAAU,EAAE,KAAK,CAAE;EACvB,CAAC;EACDC,SAAS,EAAE;IACPC,OAAOA,CAACJ,KAAK,EAAEC,IAAI,EAAE;MACjBD,KAAK,CAACC,IAAI,GAAGA,IAAI;MACjBD,KAAK,CAACE,UAAU,GAAG,CAAC,CAACD,IAAI;IAC7B,CAAC;IACDI,SAASA,CAACL,KAAK,EAAE;MACbA,KAAK,CAACC,IAAI,GAAG,IAAI;MACjBD,KAAK,CAACE,UAAU,GAAG,KAAK;IAC5B;EACJ,CAAC;EACDI,OAAO,EAAE;IACL,MAAMC,SAASA,CAAC;MAAEC;IAAO,CAAC,EAAEC,WAAW,EAAE;MACrC,IAAI;QACA;QACA,MAAMC,IAAI,GAAG,MAAMX,WAAW,CAACY,KAAK,CAACF,WAAW,CAAC;QACjD,MAAMG,KAAK,GAAGF,IAAI,CAACE,KAAK;QACxB;QACA,MAAMX,IAAI,GAAGF,WAAW,CAACc,WAAW,CAACD,KAAK,CAAC;;QAE3C;QACAJ,MAAM,CAAC,SAAS,EAAEP,IAAI,CAAC;;QAEvB;QACAa,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;QAEpCI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEhB,IAAI,CAACiB,KAAK,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZ;QACAH,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,MAAMA,KAAK;MACf;IACJ,CAAC;IACDC,UAAUA,CAAC;MAAEZ;IAAO,CAAC,EAAE;MACnB;MACAM,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;;MAEhC;MACAb,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IACDc,4BAA4BA,CAAC;MAAEd;IAAO,CAAC,EAAE;MACrC,MAAMI,KAAK,GAAGE,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIX,KAAK,EAAE;QACP;QACA,MAAMX,IAAI,GAAGF,WAAW,CAACc,WAAW,CAACD,KAAK,CAAC;QAC3C;QACAJ,MAAM,CAAC,SAAS,EAAEP,IAAI,CAAC;MAC3B,CAAC,MAAM;QACH;QACAO,MAAM,CAAC,WAAW,CAAC;MACvB;IACJ;EACJ,CAAC;EACDgB,OAAO,EAAE;IACLtB,UAAU,EAAGF,KAAK,IAAKA,KAAK,CAACE,UAAU;IACvCuB,WAAW,EAAGzB,KAAK,IAAKA,KAAK,CAACC;EAClC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}