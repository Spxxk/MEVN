{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst EventEmitter = require('events');\nconst shared = require('../shared');\nconst mimeTypes = require('../mime-funcs/mime-types');\nconst MailComposer = require('../mail-composer');\nconst DKIM = require('../dkim');\nconst httpProxyClient = require('../smtp-connection/http-proxy-client');\nconst util = require('util');\nconst urllib = require('url');\nconst packageData = require('../../package.json');\nconst MailMessage = require('./mail-message');\nconst net = require('net');\nconst dns = require('dns');\nconst crypto = require('crypto');\n\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */\nclass Mail extends EventEmitter {\n  constructor(transporter, options, defaults) {\n    super();\n    this.options = options || {};\n    this._defaults = defaults || {};\n    this._defaultPlugins = {\n      compile: [(...args) => this._convertDataImages(...args)],\n      stream: []\n    };\n    this._userPlugins = {\n      compile: [],\n      stream: []\n    };\n    this.meta = new Map();\n    this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n    this.transporter = transporter;\n    this.transporter.mailer = this;\n    this.logger = shared.getLogger(this.options, {\n      component: this.options.component || 'mail'\n    });\n    this.logger.debug({\n      tnx: 'create'\n    }, 'Creating transport: %s', this.getVersionString());\n\n    // setup emit handlers for the transporter\n    if (typeof this.transporter.on === 'function') {\n      // deprecated log interface\n      this.transporter.on('log', log => {\n        this.logger.debug({\n          tnx: 'transport'\n        }, '%s: %s', log.type, log.message);\n      });\n\n      // transporter errors\n      this.transporter.on('error', err => {\n        this.logger.error({\n          err,\n          tnx: 'transport'\n        }, 'Transport Error: %s', err.message);\n        this.emit('error', err);\n      });\n\n      // indicates if the sender has became idle\n      this.transporter.on('idle', (...args) => {\n        this.emit('idle', ...args);\n      });\n    }\n\n    /**\n     * Optional methods passed to the underlying transport object\n     */\n    ['close', 'isIdle', 'verify'].forEach(method => {\n      this[method] = (...args) => {\n        if (typeof this.transporter[method] === 'function') {\n          if (method === 'verify' && typeof this.getSocket === 'function') {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n          }\n          return this.transporter[method](...args);\n        } else {\n          this.logger.warn({\n            tnx: 'transport',\n            methodName: method\n          }, 'Non existing method %s called for transport', method);\n          return false;\n        }\n      };\n    });\n\n    // setup proxy handling\n    if (this.options.proxy && typeof this.options.proxy === 'string') {\n      this.setupProxy(this.options.proxy);\n    }\n  }\n  use(step, plugin) {\n    step = (step || '').toString();\n    if (!this._userPlugins.hasOwnProperty(step)) {\n      this._userPlugins[step] = [plugin];\n    } else {\n      this._userPlugins[step].push(plugin);\n    }\n    return this;\n  }\n\n  /**\n   * Sends an email using the preselected transport object\n   *\n   * @param {Object} data E-data description\n   * @param {Function?} callback Callback to run once the sending succeeded or failed\n   */\n  sendMail(data, callback = null) {\n    let promise;\n    if (!callback) {\n      promise = new Promise((resolve, reject) => {\n        callback = shared.callbackPromise(resolve, reject);\n      });\n    }\n    if (typeof this.getSocket === 'function') {\n      this.transporter.getSocket = this.getSocket;\n      this.getSocket = false;\n    }\n    let mail = new MailMessage(this, data);\n    this.logger.debug({\n      tnx: 'transport',\n      name: this.transporter.name,\n      version: this.transporter.version,\n      action: 'send'\n    }, 'Sending mail using %s/%s', this.transporter.name, this.transporter.version);\n    this._processPlugins('compile', mail, err => {\n      if (err) {\n        this.logger.error({\n          err,\n          tnx: 'plugin',\n          action: 'compile'\n        }, 'PluginCompile Error: %s', err.message);\n        return callback(err);\n      }\n      mail.message = new MailComposer(mail.data).compile();\n      mail.setMailerHeader();\n      mail.setPriorityHeaders();\n      mail.setListHeaders();\n      this._processPlugins('stream', mail, err => {\n        if (err) {\n          this.logger.error({\n            err,\n            tnx: 'plugin',\n            action: 'stream'\n          }, 'PluginStream Error: %s', err.message);\n          return callback(err);\n        }\n        if (mail.data.dkim || this.dkim) {\n          mail.message.processFunc(input => {\n            let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n            this.logger.debug({\n              tnx: 'DKIM',\n              messageId: mail.message.messageId(),\n              dkimDomains: dkim.keys.map(key => key.keySelector + '.' + key.domainName).join(', ')\n            }, 'Signing outgoing message with %s keys', dkim.keys.length);\n            return dkim.sign(input, mail.data._dkim);\n          });\n        }\n        this.transporter.send(mail, (...args) => {\n          if (args[0]) {\n            this.logger.error({\n              err: args[0],\n              tnx: 'transport',\n              action: 'send'\n            }, 'Send Error: %s', args[0].message);\n          }\n          callback(...args);\n        });\n      });\n    });\n    return promise;\n  }\n  getVersionString() {\n    return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n  }\n  _processPlugins(step, mail, callback) {\n    step = (step || '').toString();\n    if (!this._userPlugins.hasOwnProperty(step)) {\n      return callback();\n    }\n    let userPlugins = this._userPlugins[step] || [];\n    let defaultPlugins = this._defaultPlugins[step] || [];\n    if (userPlugins.length) {\n      this.logger.debug({\n        tnx: 'transaction',\n        pluginCount: userPlugins.length,\n        step\n      }, 'Using %s plugins for %s', userPlugins.length, step);\n    }\n    if (userPlugins.length + defaultPlugins.length === 0) {\n      return callback();\n    }\n    let pos = 0;\n    let block = 'default';\n    let processPlugins = () => {\n      let curplugins = block === 'default' ? defaultPlugins : userPlugins;\n      if (pos >= curplugins.length) {\n        if (block === 'default' && userPlugins.length) {\n          block = 'user';\n          pos = 0;\n          curplugins = userPlugins;\n        } else {\n          return callback();\n        }\n      }\n      let plugin = curplugins[pos++];\n      plugin(mail, err => {\n        if (err) {\n          return callback(err);\n        }\n        processPlugins();\n      });\n    };\n    processPlugins();\n  }\n\n  /**\n   * Sets up proxy handler for a Nodemailer object\n   *\n   * @param {String} proxyUrl Proxy configuration url\n   */\n  setupProxy(proxyUrl) {\n    let proxy = urllib.parse(proxyUrl);\n\n    // setup socket handler for the mailer object\n    this.getSocket = (options, callback) => {\n      let protocol = proxy.protocol.replace(/:$/, '').toLowerCase();\n      if (this.meta.has('proxy_handler_' + protocol)) {\n        return this.meta.get('proxy_handler_' + protocol)(proxy, options, callback);\n      }\n      switch (protocol) {\n        // Connect using a HTTP CONNECT method\n        case 'http':\n        case 'https':\n          httpProxyClient(proxy.href, options.port, options.host, (err, socket) => {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, {\n              connection: socket\n            });\n          });\n          return;\n        case 'socks':\n        case 'socks5':\n        case 'socks4':\n        case 'socks4a':\n          {\n            if (!this.meta.has('proxy_socks_module')) {\n              return callback(new Error('Socks module not loaded'));\n            }\n            let connect = ipaddress => {\n              let proxyV2 = !!this.meta.get('proxy_socks_module').SocksClient;\n              let socksClient = proxyV2 ? this.meta.get('proxy_socks_module').SocksClient : this.meta.get('proxy_socks_module');\n              let proxyType = Number(proxy.protocol.replace(/\\D/g, '')) || 5;\n              let connectionOpts = {\n                proxy: {\n                  ipaddress,\n                  port: Number(proxy.port),\n                  type: proxyType\n                },\n                [proxyV2 ? 'destination' : 'target']: {\n                  host: options.host,\n                  port: options.port\n                },\n                command: 'connect'\n              };\n              if (proxy.auth) {\n                let username = decodeURIComponent(proxy.auth.split(':').shift());\n                let password = decodeURIComponent(proxy.auth.split(':').pop());\n                if (proxyV2) {\n                  connectionOpts.proxy.userId = username;\n                  connectionOpts.proxy.password = password;\n                } else if (proxyType === 4) {\n                  connectionOpts.userid = username;\n                } else {\n                  connectionOpts.authentication = {\n                    username,\n                    password\n                  };\n                }\n              }\n              socksClient.createConnection(connectionOpts, (err, info) => {\n                if (err) {\n                  return callback(err);\n                }\n                return callback(null, {\n                  connection: info.socket || info\n                });\n              });\n            };\n            if (net.isIP(proxy.hostname)) {\n              return connect(proxy.hostname);\n            }\n            return dns.resolve(proxy.hostname, (err, address) => {\n              if (err) {\n                return callback(err);\n              }\n              connect(Array.isArray(address) ? address[0] : address);\n            });\n          }\n      }\n      callback(new Error('Unknown proxy configuration'));\n    };\n  }\n  _convertDataImages(mail, callback) {\n    if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n      return callback();\n    }\n    mail.resolveContent(mail.data, 'html', (err, html) => {\n      if (err) {\n        return callback(err);\n      }\n      let cidCounter = 0;\n      html = (html || '').toString().replace(/(<img\\b[^<>]{0,1024} src\\s{0,20}=[\\s\"']{0,20})(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType) => {\n        let cid = crypto.randomBytes(10).toString('hex') + '@localhost';\n        if (!mail.data.attachments) {\n          mail.data.attachments = [];\n        }\n        if (!Array.isArray(mail.data.attachments)) {\n          mail.data.attachments = [].concat(mail.data.attachments || []);\n        }\n        mail.data.attachments.push({\n          path: dataUri,\n          cid,\n          filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)\n        });\n        return prefix + 'cid:' + cid;\n      });\n      mail.data.html = html;\n      callback();\n    });\n  }\n  set(key, value) {\n    return this.meta.set(key, value);\n  }\n  get(key) {\n    return this.meta.get(key);\n  }\n}\nmodule.exports = Mail;","map":{"version":3,"names":["require","EventEmitter","shared","mimeTypes","MailComposer","DKIM","httpProxyClient","util","urllib","packageData","MailMessage","net","dns","crypto","Mail","constructor","transporter","options","defaults","_defaults","_defaultPlugins","compile","args","_convertDataImages","stream","_userPlugins","meta","Map","dkim","mailer","logger","getLogger","component","debug","tnx","getVersionString","on","log","type","message","err","error","emit","forEach","method","getSocket","warn","methodName","proxy","setupProxy","use","step","plugin","toString","hasOwnProperty","push","sendMail","data","callback","promise","Promise","resolve","reject","callbackPromise","mail","name","version","action","_processPlugins","setMailerHeader","setPriorityHeaders","setListHeaders","processFunc","input","messageId","dkimDomains","keys","map","key","keySelector","domainName","join","length","sign","_dkim","send","format","homepage","userPlugins","defaultPlugins","pluginCount","pos","block","processPlugins","curplugins","proxyUrl","parse","protocol","replace","toLowerCase","has","get","href","port","host","socket","connection","Error","connect","ipaddress","proxyV2","SocksClient","socksClient","proxyType","Number","connectionOpts","command","auth","username","decodeURIComponent","split","shift","password","pop","userId","userid","authentication","createConnection","info","isIP","hostname","address","Array","isArray","attachDataUrls","html","resolveContent","cidCounter","match","prefix","dataUri","mimeType","cid","randomBytes","attachments","concat","path","filename","detectExtension","set","value","module","exports"],"sources":["C:/Users/jason/Desktop/owen/frontend/node_modules/nodemailer/lib/mailer/index.js"],"sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst shared = require('../shared');\nconst mimeTypes = require('../mime-funcs/mime-types');\nconst MailComposer = require('../mail-composer');\nconst DKIM = require('../dkim');\nconst httpProxyClient = require('../smtp-connection/http-proxy-client');\nconst util = require('util');\nconst urllib = require('url');\nconst packageData = require('../../package.json');\nconst MailMessage = require('./mail-message');\nconst net = require('net');\nconst dns = require('dns');\nconst crypto = require('crypto');\n\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */\nclass Mail extends EventEmitter {\n    constructor(transporter, options, defaults) {\n        super();\n\n        this.options = options || {};\n        this._defaults = defaults || {};\n\n        this._defaultPlugins = {\n            compile: [(...args) => this._convertDataImages(...args)],\n            stream: []\n        };\n\n        this._userPlugins = {\n            compile: [],\n            stream: []\n        };\n\n        this.meta = new Map();\n\n        this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n\n        this.transporter = transporter;\n        this.transporter.mailer = this;\n\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || 'mail'\n        });\n\n        this.logger.debug(\n            {\n                tnx: 'create'\n            },\n            'Creating transport: %s',\n            this.getVersionString()\n        );\n\n        // setup emit handlers for the transporter\n        if (typeof this.transporter.on === 'function') {\n            // deprecated log interface\n            this.transporter.on('log', log => {\n                this.logger.debug(\n                    {\n                        tnx: 'transport'\n                    },\n                    '%s: %s',\n                    log.type,\n                    log.message\n                );\n            });\n\n            // transporter errors\n            this.transporter.on('error', err => {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'transport'\n                    },\n                    'Transport Error: %s',\n                    err.message\n                );\n                this.emit('error', err);\n            });\n\n            // indicates if the sender has became idle\n            this.transporter.on('idle', (...args) => {\n                this.emit('idle', ...args);\n            });\n        }\n\n        /**\n         * Optional methods passed to the underlying transport object\n         */\n        ['close', 'isIdle', 'verify'].forEach(method => {\n            this[method] = (...args) => {\n                if (typeof this.transporter[method] === 'function') {\n                    if (method === 'verify' && typeof this.getSocket === 'function') {\n                        this.transporter.getSocket = this.getSocket;\n                        this.getSocket = false;\n                    }\n                    return this.transporter[method](...args);\n                } else {\n                    this.logger.warn(\n                        {\n                            tnx: 'transport',\n                            methodName: method\n                        },\n                        'Non existing method %s called for transport',\n                        method\n                    );\n                    return false;\n                }\n            };\n        });\n\n        // setup proxy handling\n        if (this.options.proxy && typeof this.options.proxy === 'string') {\n            this.setupProxy(this.options.proxy);\n        }\n    }\n\n    use(step, plugin) {\n        step = (step || '').toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            this._userPlugins[step] = [plugin];\n        } else {\n            this._userPlugins[step].push(plugin);\n        }\n\n        return this;\n    }\n\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */\n    sendMail(data, callback = null) {\n        let promise;\n\n        if (!callback) {\n            promise = new Promise((resolve, reject) => {\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n\n        if (typeof this.getSocket === 'function') {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n        }\n\n        let mail = new MailMessage(this, data);\n\n        this.logger.debug(\n            {\n                tnx: 'transport',\n                name: this.transporter.name,\n                version: this.transporter.version,\n                action: 'send'\n            },\n            'Sending mail using %s/%s',\n            this.transporter.name,\n            this.transporter.version\n        );\n\n        this._processPlugins('compile', mail, err => {\n            if (err) {\n                this.logger.error(\n                    {\n                        err,\n                        tnx: 'plugin',\n                        action: 'compile'\n                    },\n                    'PluginCompile Error: %s',\n                    err.message\n                );\n                return callback(err);\n            }\n\n            mail.message = new MailComposer(mail.data).compile();\n\n            mail.setMailerHeader();\n            mail.setPriorityHeaders();\n            mail.setListHeaders();\n\n            this._processPlugins('stream', mail, err => {\n                if (err) {\n                    this.logger.error(\n                        {\n                            err,\n                            tnx: 'plugin',\n                            action: 'stream'\n                        },\n                        'PluginStream Error: %s',\n                        err.message\n                    );\n                    return callback(err);\n                }\n\n                if (mail.data.dkim || this.dkim) {\n                    mail.message.processFunc(input => {\n                        let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n                        this.logger.debug(\n                            {\n                                tnx: 'DKIM',\n                                messageId: mail.message.messageId(),\n                                dkimDomains: dkim.keys.map(key => key.keySelector + '.' + key.domainName).join(', ')\n                            },\n                            'Signing outgoing message with %s keys',\n                            dkim.keys.length\n                        );\n                        return dkim.sign(input, mail.data._dkim);\n                    });\n                }\n\n                this.transporter.send(mail, (...args) => {\n                    if (args[0]) {\n                        this.logger.error(\n                            {\n                                err: args[0],\n                                tnx: 'transport',\n                                action: 'send'\n                            },\n                            'Send Error: %s',\n                            args[0].message\n                        );\n                    }\n                    callback(...args);\n                });\n            });\n        });\n\n        return promise;\n    }\n\n    getVersionString() {\n        return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n\n    _processPlugins(step, mail, callback) {\n        step = (step || '').toString();\n\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            return callback();\n        }\n\n        let userPlugins = this._userPlugins[step] || [];\n        let defaultPlugins = this._defaultPlugins[step] || [];\n\n        if (userPlugins.length) {\n            this.logger.debug(\n                {\n                    tnx: 'transaction',\n                    pluginCount: userPlugins.length,\n                    step\n                },\n                'Using %s plugins for %s',\n                userPlugins.length,\n                step\n            );\n        }\n\n        if (userPlugins.length + defaultPlugins.length === 0) {\n            return callback();\n        }\n\n        let pos = 0;\n        let block = 'default';\n        let processPlugins = () => {\n            let curplugins = block === 'default' ? defaultPlugins : userPlugins;\n            if (pos >= curplugins.length) {\n                if (block === 'default' && userPlugins.length) {\n                    block = 'user';\n                    pos = 0;\n                    curplugins = userPlugins;\n                } else {\n                    return callback();\n                }\n            }\n            let plugin = curplugins[pos++];\n            plugin(mail, err => {\n                if (err) {\n                    return callback(err);\n                }\n                processPlugins();\n            });\n        };\n\n        processPlugins();\n    }\n\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */\n    setupProxy(proxyUrl) {\n        let proxy = urllib.parse(proxyUrl);\n\n        // setup socket handler for the mailer object\n        this.getSocket = (options, callback) => {\n            let protocol = proxy.protocol.replace(/:$/, '').toLowerCase();\n\n            if (this.meta.has('proxy_handler_' + protocol)) {\n                return this.meta.get('proxy_handler_' + protocol)(proxy, options, callback);\n            }\n\n            switch (protocol) {\n                // Connect using a HTTP CONNECT method\n                case 'http':\n                case 'https':\n                    httpProxyClient(proxy.href, options.port, options.host, (err, socket) => {\n                        if (err) {\n                            return callback(err);\n                        }\n                        return callback(null, {\n                            connection: socket\n                        });\n                    });\n                    return;\n                case 'socks':\n                case 'socks5':\n                case 'socks4':\n                case 'socks4a': {\n                    if (!this.meta.has('proxy_socks_module')) {\n                        return callback(new Error('Socks module not loaded'));\n                    }\n                    let connect = ipaddress => {\n                        let proxyV2 = !!this.meta.get('proxy_socks_module').SocksClient;\n                        let socksClient = proxyV2 ? this.meta.get('proxy_socks_module').SocksClient : this.meta.get('proxy_socks_module');\n                        let proxyType = Number(proxy.protocol.replace(/\\D/g, '')) || 5;\n                        let connectionOpts = {\n                            proxy: {\n                                ipaddress,\n                                port: Number(proxy.port),\n                                type: proxyType\n                            },\n                            [proxyV2 ? 'destination' : 'target']: {\n                                host: options.host,\n                                port: options.port\n                            },\n                            command: 'connect'\n                        };\n\n                        if (proxy.auth) {\n                            let username = decodeURIComponent(proxy.auth.split(':').shift());\n                            let password = decodeURIComponent(proxy.auth.split(':').pop());\n                            if (proxyV2) {\n                                connectionOpts.proxy.userId = username;\n                                connectionOpts.proxy.password = password;\n                            } else if (proxyType === 4) {\n                                connectionOpts.userid = username;\n                            } else {\n                                connectionOpts.authentication = {\n                                    username,\n                                    password\n                                };\n                            }\n                        }\n\n                        socksClient.createConnection(connectionOpts, (err, info) => {\n                            if (err) {\n                                return callback(err);\n                            }\n                            return callback(null, {\n                                connection: info.socket || info\n                            });\n                        });\n                    };\n\n                    if (net.isIP(proxy.hostname)) {\n                        return connect(proxy.hostname);\n                    }\n\n                    return dns.resolve(proxy.hostname, (err, address) => {\n                        if (err) {\n                            return callback(err);\n                        }\n                        connect(Array.isArray(address) ? address[0] : address);\n                    });\n                }\n            }\n            callback(new Error('Unknown proxy configuration'));\n        };\n    }\n\n    _convertDataImages(mail, callback) {\n        if ((!this.options.attachDataUrls && !mail.data.attachDataUrls) || !mail.data.html) {\n            return callback();\n        }\n        mail.resolveContent(mail.data, 'html', (err, html) => {\n            if (err) {\n                return callback(err);\n            }\n            let cidCounter = 0;\n            html = (html || '')\n                .toString()\n                .replace(/(<img\\b[^<>]{0,1024} src\\s{0,20}=[\\s\"']{0,20})(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType) => {\n                    let cid = crypto.randomBytes(10).toString('hex') + '@localhost';\n                    if (!mail.data.attachments) {\n                        mail.data.attachments = [];\n                    }\n                    if (!Array.isArray(mail.data.attachments)) {\n                        mail.data.attachments = [].concat(mail.data.attachments || []);\n                    }\n                    mail.data.attachments.push({\n                        path: dataUri,\n                        cid,\n                        filename: 'image-' + ++cidCounter + '.' + mimeTypes.detectExtension(mimeType)\n                    });\n                    return prefix + 'cid:' + cid;\n                });\n            mail.data.html = html;\n            callback();\n        });\n    }\n\n    set(key, value) {\n        return this.meta.set(key, value);\n    }\n\n    get(key) {\n        return this.meta.get(key);\n    }\n}\n\nmodule.exports = Mail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}