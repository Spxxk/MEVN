{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n// Import Axios for making HTTP requests\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000'; // Replace this with your backend API URL\n\nconst AuthService = {\n  async login(credentials) {\n    try {\n      // const email = credentials.email\n      // const password = credentials.password\n      // Make a POST request to your backend API to authenticate the user\n      const response = await axios.post(`${API_URL}/auth/login`, credentials, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n\n      // Check if the login was successful\n      if (response.status === 200) {\n        console.log(\"abcabc\", response);\n        return response.data; // Return the user data\n      } else {\n        console.log('test1');\n        throw new Error('Login failed: Incorrect credentials');\n      }\n    } catch (error) {\n      // Handle other errors (e.g., network error)\n      console.error('cde cde Login failed:', error);\n      throw error;\n    }\n  },\n  decodeToken(token) {\n    try {\n      if (typeof token !== 'string') {\n        throw new Error('Token must be a string.');\n      }\n      // Split the token into its parts\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid token format.');\n      }\n      // Decode the payload from base64\n\n      const payloadJson = atob(parts[1]);\n      // Parse the payload as JSON\n      const payload = JSON.parse(payloadJson);\n      return payload;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","API_URL","AuthService","login","credentials","response","post","headers","status","console","log","data","Error","error","decodeToken","token","parts","split","length","payloadJson","atob","payload","JSON","parse"],"sources":["C:/Users/owenc/OneDrive/Desktop/owen/frontend/src/services/AuthService.js"],"sourcesContent":["// Import Axios for making HTTP requests\nimport axios from 'axios'\n\nconst API_URL = 'http://localhost:3000'; // Replace this with your backend API URL\n\nconst AuthService = {\n  async login(credentials) {\n    try {\n      // const email = credentials.email\n      // const password = credentials.password\n      // Make a POST request to your backend API to authenticate the user\n      const response = await axios.post(`${API_URL}/auth/login`, credentials, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      })\n\n      // Check if the login was successful\n      if (response.status === 200) {\n        console.log(\"abcabc\", response);\n        return response.data; // Return the user data\n      }else {\n        console.log('test1')\n        throw new Error('Login failed: Incorrect credentials');\n      }\n    } catch (error) {\n      // Handle other errors (e.g., network error)\n      console.error('cde cde Login failed:', error);\n      throw error;\n    }\n  },\n  decodeToken(token){\n    try {\n      if (typeof token !== 'string') {\n        throw new Error('Token must be a string.');\n      }\n      // Split the token into its parts\n      const parts = token.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid token format.');\n      }\n      // Decode the payload from base64\n\n      const payloadJson = atob(parts[1]);\n      // Parse the payload as JSON\n      const payload = JSON.parse(payloadJson);\n      return payload;\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      return null;\n    }\n  },\n};\n\nexport default AuthService;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC,MAAMC,WAAW,GAAG;EAClB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF;MACA;MACA;MACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAE,GAAEL,OAAQ,aAAY,EAAEG,WAAW,EAAE;QACtEG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;;MAEF;MACA,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,QAAQ,CAAC;QAC/B,OAAOA,QAAQ,CAACM,IAAI,CAAC,CAAC;MACxB,CAAC,MAAK;QACJF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpB,MAAM,IAAIE,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EACDC,WAAWA,CAACC,KAAK,EAAC;IAChB,IAAI;MACF,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,IAAIH,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA;MACA,MAAMI,KAAK,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;MAC9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QACtB,MAAM,IAAIN,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA;;MAEA,MAAMO,WAAW,GAAGC,IAAI,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MAClC;MACA,MAAMK,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACJ,WAAW,CAAC;MACvC,OAAOE,OAAO;IAChB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,eAAeX,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}